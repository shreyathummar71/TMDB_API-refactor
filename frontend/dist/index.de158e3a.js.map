{"mappings":"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","sources":["src/main.js"],"sourcesContent":["//On pageload calls the fetch\r\ndocument.addEventListener(\"DOMContentLoaded\", async () => {\r\n  const apiUrl = \"http://localhost:3000/api/movies/popular\";\r\n  //Fetching Movies data\r\n  try {\r\n    const response = await fetch(apiUrl);\r\n    if (!response.ok) {\r\n      throw new Error(`Network issue, ${response.status}`);\r\n    }\r\n    data = await response.json();\r\n    console.log(data);\r\n    fetchData(data.results);\r\n  } catch (error) {\r\n    console.log(\"Fetch Error\", error);\r\n  }\r\n  //await searchData(searchTerm) is waiting for the promise returned by the searchData function to resolve.\r\n  document.getElementById(\"searchMovie\").addEventListener(\"click\", async () => {\r\n    try {\r\n      const searchTerm = document\r\n        .getElementById(\"searchInput\")\r\n        .value.toLowerCase();\r\n      // The await keyword is used inside an async function to wait for a promise to resolve\r\n      await searchData(searchTerm);\r\n    } catch (error) {\r\n      console.error(\"An Error Occured\", error.message);\r\n    }\r\n  });\r\n});\r\nconst fetchData = (movies) => {\r\n  const moviesContainer = document.getElementById(\"movies-container\");\r\n  moviesContainer.innerHTML = \"\";\r\n  moviesContainer.classList.add(\r\n    \"grid\",\r\n    \"grid-cols-1\",\r\n    \"sm:grid-cols-2\",\r\n    \"md:grid-cols-3\",\r\n    \"lg:grid-cols-4\",\r\n    \"gap-x-4\",\r\n    \"gap-y-4\",\r\n    \"px-2\",\r\n    \"py-10\",\r\n    \"mx-auto\",\r\n    \"mt-8\",\r\n    \"mb-8\",\r\n    \"md:ml-10\",\r\n    \"md:mr-10\",\r\n    \"justify-items-center\",\r\n    \"items-center\"\r\n  );\r\n  movies.forEach((movie) => {\r\n    console.log(movie);\r\n    const title = movie.title;\r\n    const thumbNail = movie.poster_path;\r\n    const overview = movie.overview;\r\n    const uniqueId = movie.id;\r\n    const releaseDate = movie.release_date;\r\n    const card = document.createElement(\"div\");\r\n    card.classList.add(\r\n      \"max-w-md\",\r\n      \"rounded-lg\",\r\n      \"shadow-lg\",\r\n      \"m-2\",\r\n      \"h-auto\",\r\n      \"w-full\"\r\n    );\r\n    card.innerHTML = `\r\n    <img src= \"${`https://image.tmdb.org/t/p/w500${thumbNail}`}\" alt=\"${title}\" class=\"w-full h-auto object-cover\">\r\n    <div class=\"px-6 py-4 h-auto w-full\">\r\n     <div class=\"font-bold text-xl mb-2 truncate\">${title}</div>\r\n    <p class=\"text-gray-700 text-base truncate\">${overview}</p>\r\n    <div class=\"font-bold text-l mb-2\">Releasing on: ${releaseDate}</div>\r\n    <button class=\"add-to-cart bg-blue-500 text-white py-2 px-4 rounded hover:bg-blue-600\"  data-poster-path=\"https://image.tmdb.org/t/p/w500/${thumbNail}\" data-id=\"${uniqueId}\" data-title=\"${title}\">Add to Favorite</button>\r\n    </div>\r\n   `;\r\n    moviesContainer.appendChild(card);\r\n  });\r\n  // Add event listeners to the buttons\r\n  const buttons = document.querySelectorAll(\".add-to-cart\");\r\n  buttons.forEach((button) => {\r\n    button.addEventListener(\"click\", addToCart);\r\n  });\r\n};\r\nconst addToCart = (event) => {\r\n  const button = event.target;\r\n  const movieId = button.getAttribute(\"data-id\");\r\n  const movieTitle = button.getAttribute(\"data-title\");\r\n  const posterPath =\r\n    button.getAttribute(\"data-poster-path\") || \"placeholder-image-url\";\r\n\r\n  // Retrieve cart from localStorage or initialize an empty array\r\n  let cart = JSON.parse(localStorage.getItem(\"cart\")) || [];\r\n\r\n  // Check if the movie is already in the cart based on its ID\r\n  if (cart.some((movie) => movie.id === movieId)) {\r\n    showNotification(`${movieTitle} is already in your Favorite!`);\r\n    return;\r\n  }\r\n\r\n  // Add the movie to the cart\r\n  cart.push({ id: movieId, poster_path: posterPath, title: movieTitle });\r\n\r\n  // Save the updated cart back to localStorage\r\n  localStorage.setItem(\"cart\", JSON.stringify(cart));\r\n\r\n  // Display a success message\r\n  showNotification(`${movieTitle} has been added to your Favorite!`);\r\n};\r\nasync function searchData(searchTerm) {\r\n  // Wrapped the searchData function in a try...catch block to catch any errors that might occur during execution.\r\n  try {\r\n    const filteredMovies = data.results.filter((movie) =>\r\n      movie.title.toLowerCase().includes(searchTerm)\r\n    );\r\n\r\n    if (filteredMovies.length > 0) {\r\n      fetchData(filteredMovies);\r\n    } else {\r\n      document.getElementById(\"Not-Found-Movie\").innerHTML =\r\n        \" No movies found matching your search.\";\r\n    }\r\n  } catch (error) {\r\n    console.error(\"Error during search:\", error.message);\r\n  }\r\n}\r\nconst showNotification = (message) => {\r\n  const notification = document.getElementById(\"notification\");\r\n  notification.textContent = message;\r\n  notification.classList.remove(\"hidden\");\r\n  setTimeout(() => {\r\n    notification.classList.add(\"hidden\");\r\n  }, 4000);\r\n};\r\n"],"names":[],"version":3,"file":"index.de158e3a.js.map","sourceRoot":"/__parcel_source_root/"}